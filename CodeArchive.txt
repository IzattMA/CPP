
========== Pointers ==========

int num = 3;

int* pNum = &num;

int *pNum = &num;

=====

 #include "stdafx.h"
 #include <iostream>
    
    using namespace std;
    
    int main()
    {
    
        int num = 3;
        int *pNum = &num;

        cout << pNum << endl;

        return 0;
    }

=====

int *pNum;  // not recommended
    
cout << pNum << endl;

=====



========== Dereference Operator =========

int num = 3;            // a simple variable holding the value 3
int *pNum = &num;        // a pointer holding the address of num
cout << pNum << endl;    // output the memory address of num
cout << *pNum << endl;    // output the value 3


=====

int num = 3;
int *pNum = &num;
cout << pNum << endl;
cout << *pNum << endl;

*pNum = 45;
cout << *pNum << endl;		//45
cout << num << endl;		//45



========== 2018_02_10_1249_EdXCPP_PointDereference.cpp ==========

// 2018_02_10_1249_EdXCPP_PointDereference.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>

using namespace std;

int main()
{
    
	int num = 3;
	int *pNum = &num;
	cout << pNum << endl;		//hex
	cout << *pNum << endl;		//3

	*pNum = 45;
	cout << *pNum << endl;		//45
	cout << num << endl;		//45

}


========================================================================================================================

==========  2018_02_10_1254_EdXCPP_SimplePointersDemo.cpp  ===========


// 2018_02_10_1254_EdXCPP_SimplePointersDemo.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>

int main()
{

	/********************
	* simple pointers   *
	*********************/

	int num = 3;

	// create a pointer variable to an int type and assign it the address of the integer straight-away
	int *pNum = &num;

	// output the value of num
	std::cout << num << std::endl;		//3

	// output the address of num to compare with the value in pNum
	std::cout << &num << std::endl;		//hex

	// output the value stored in pNUm
	std::cout << *pNum << std::endl;	//3


}


==========  Understanding pointers better ==============================================================================

int ~ 32-bit value

int *pNum = &num;

Same answer
-----------
cout << pNum;
cout << &num;


cout << num //3
int contents = *pNUM;

int *pNum = &num; 		//left of assignment means pointer
int contents = *pNum; 		//right of assignment means dereference operator

==========
========== Introducing reference types =================================================================================

int num = 3;
int &refNum = num;
int &refNum2;
cout << refNum << endl;		//3

int num = 3;
int &refNum = num;

cout << "num contains " << num << endl;			//num contains 3
cout << "refNum contains " << refNum << endl;		//refNum contains 3

refNum++;    // increment refNum by 1

cout << "num contains " << num << endl;			//num contains 4			
cout << "refNum contains " << refNum << endl;		//refNum contains 4
cout << "refNum is located at " << &refNum << " and num is located at " << &num << endl;  	//refNum is located at <hex> 
												// and num located at <hex

==========

 using namespace std;

    void passByValue(int);

    int main()
    {

        int num = 3;
        cout << "In main()" << endl;
        cout << "Value of num is " << num << endl;

        passByValue(num);

        cout << "Back in main and the value of num is  " << num << endl;


        return 0;
    }

    void passByValue(int num1)
    {
        cout << "In passByValue()" << endl;
        cout << "Value of num1 is " << num1 << endl;

        // modify num1, won't impact num
        num1++;

        cout << "num1 is now " << num1 << endl;
    }

==========

// Pass by value

#include "stdafx.h"
#include <iostream>
using namespace std;

void passByValue(int);

int main()
{

	int num = 3;
	cout << "In main()" << endl;
	cout << "Value of num is " << num << endl;

	passByValue(num);

	cout << "Back in main and the value of num is  " << num << endl;


	return 0;
}

void passByValue(int num1)
{
	cout << "In passByValue()" << endl;
	cout << "Value of num1 is " << num1 << endl;

	// modify num1, won't impact num
	num1++;

	cout << "num1 is now " << num1 << endl;
}


========================================================================================================================

// Pass by reference

#include "stdafx.h"
#include <iostream>
using namespace std;

void passByRef(int &num1);  //required else raises a passByRef error

int main()
{

	int num = 3;
	cout << "In main()" << endl;
	cout << "Value of num is " << num << endl;

	passByRef(num);

	cout << "Back in main and the value of num is  " << num << endl;


	return 0;
}

void passByRef(int &num1)
{
	cout << "In passByRef()" << endl;
	cout << "Value of num1 is " << num1 << endl;

	// modify num1 which will now change num
	num1++;

	cout << "num1 is now " << num1 << endl;
}



========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================